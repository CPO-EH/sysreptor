from django.contrib import admin
from simple_history.admin import SimpleHistoryAdmin

from reportcreator_api.pentests.models import (
    ArchivedProject,
    ArchivedProjectKeyPart,
    ArchivedProjectPublicKeyEncryptedKeyPart,
    CollabClientInfo,
    CollabEvent,
    Comment,
    CommentAnswer,
    FindingTemplate,
    FindingTemplateTranslation,
    PentestFinding,
    PentestProject,
    ProjectMemberInfo,
    ProjectMemberRole,
    ProjectNotebookPage,
    ProjectType,
    ReportSection,
    ShareInfo,
    UploadedAsset,
    UploadedImage,
    UploadedProjectFile,
    UploadedTemplateImage,
    UploadedUserNotebookFile,
    UploadedUserNotebookImage,
    UserNotebookPage,
    UserPublicKey,
)
from reportcreator_api.utils.admin import BaseAdmin, admin_change_url, admin_changelist_url


@admin.register(ProjectType)
class ProjectTypeAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'name', 'created', 'status', 'tags']
    readonly_fields = ('default_notes',)

    def link_projects(self, obj):
        return admin_changelist_url('Projects using this ProjectType', 'pentests', 'pentestproject', {'project_type_id': obj.id})

    def link_uploaded_assets(self, obj):
        return admin_change_url('Uploaded assets', 'pentests', 'uploadedasset', {'projecttype_id': obj.id})


@admin.register(ProjectMemberRole)
class ProjectMemberRoleAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['role', 'default']


class ProjectMemberInfoInlineAdmin(admin.StackedInline):
    model = ProjectMemberInfo


@admin.register(PentestProject)
class PentestProjectAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'name', 'created', 'readonly', 'tags']
    inlines = [ProjectMemberInfoInlineAdmin]
    readonly_fields = ('imported_members',)

    def link_findings(self, obj):
        return admin_changelist_url('Findings of this project', 'pentests', 'pentestfinding', {'project_id': obj.id})

    def link_sections(self, obj):
        return admin_changelist_url('Sections of this project', 'pentests', 'reportsection', {'project_id': obj.id})

    def link_project_type(self, obj):
        return admin_change_url(obj.project_type.name, 'pentests', 'projecttype', obj.project_type.id)

    def link_uploaded_images(self, obj):
        return admin_changelist_url('Uploaded images', 'pentests', 'uploadedimage', {'linked_object_id': obj.id})

    def link_notes(self, obj):
        return admin_changelist_url('Notebook pages', 'pentests', 'projectnotebookpage', {'project_id': obj.id})

    def link_uploaded_files(self, obj):
        return admin_changelist_url('Uploaded files', 'pentests', 'uploadedprojectfile', {'linked_object_id': obj.id})

    def link_shared_notes(self, obj):
        return admin_changelist_url('Shared notes', 'pentests', 'shareinfo', {'note__project_id': obj.id})


@admin.register(PentestFinding)
class PentestFindingAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'title', 'project', 'created', 'status']

    def link_project(self, obj):
        return admin_change_url(obj.project.name, 'pentests', 'pentestproject', obj.project.id)


@admin.register(ReportSection)
class ReportSectionAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'section_label', 'project', 'status']
    list_select_related = ['project__project_type']

    def link_project(self, obj):
        return admin_change_url(obj.project.name, 'pentests', 'pentestproject', obj.project.id)


@admin.register(Comment)
class CommentAdmin(BaseAdmin):
    list_display = ['id', 'text', 'path', 'status', 'created', 'user']

    def link_answers(self, obj):
        return admin_changelist_url('Answers', 'pentests', 'commentanswer', {'comment_id': obj.id})


@admin.register(CommentAnswer)
class CommentAnswerAdmin(BaseAdmin):
    list_display = ['id', 'text', 'created', 'user']

    def link_comment(self, obj):
        return admin_change_url('Comment', 'pentests', 'comment', obj.comment.id)


@admin.register(ProjectNotebookPage)
class ProjectNotebookPageAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'title', 'project', 'created', 'checked']

    def link_project(self, obj):
        return admin_change_url(obj.project.name, 'pentests', 'pentestproject', obj.project.id)


@admin.register(UserNotebookPage)
class UserNotebookPageAdmin(BaseAdmin):
    list_display = ['id', 'title', 'user', 'created', 'checked']

    def link_user(self, obj):
        return admin_change_url(obj.user.name, 'users', 'pentestuser', obj.user.id)


@admin.register(FindingTemplate)
class FindingTemplateAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'main_translation', 'created', 'tags']
    list_select_related = ['main_translation']

    def link_translations(self, obj):
        return admin_changelist_url('Translations', 'pentests', 'findingtemplatetranslation', {'template_id': obj.id})

    def link_images(self, obj):
        return admin_changelist_url('Images', 'pentests', 'uploadedtemplateimage', {'template_id': obj.id})


@admin.register(FindingTemplateTranslation)
class FindingTemplateTranslationAdmin(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'title', 'language', 'created', 'status']

    def link_template(self, obj):
        return admin_change_url('Template', 'pentests', 'findingtemplate', obj.template_id)


class FileAdminBase(SimpleHistoryAdmin, BaseAdmin):
    list_display = ['id', 'created', 'linked_object', 'name']


@admin.register(UploadedImage)
class UploadedImageAdmin(FileAdminBase):
    def link_project(self, obj):
        return admin_change_url(obj.linked_object.name, 'pentests', 'pentestproject', obj.linked_object.id)


@admin.register(UploadedAsset)
class UploadedAssetAdmin(FileAdminBase):
    def link_project_type(self, obj):
        return admin_change_url(obj.linked_object.name, 'pentests', 'projecttype', obj.linked_object.id)


@admin.register(UploadedProjectFile)
class UploadedProjectFileAdmin(FileAdminBase):
    def link_project(self, obj):
        return admin_change_url(obj.linked_object.name, 'pentests', 'pentestproject', obj.linked_object.id)


@admin.register(UploadedUserNotebookImage)
class UploadedUserNotebookImageAdmin(FileAdminBase):
    def link_user(self, obj):
        return admin_change_url(obj.linked_object.name, 'users', 'pentestuser', obj.linked_object.id)


@admin.register(UploadedTemplateImage)
class UploadedTemplateImageAdmin(FileAdminBase):
    def link_template(self, obj):
        return admin_change_url(obj.linked_object.name, 'pentests', 'findingtemplate', obj.linked_object.id)


@admin.register(UploadedUserNotebookFile)
class UploadedUserNotebookFileAdmin(FileAdminBase):
    def link_user(self, obj):
        return admin_change_url(obj.linked_object.name, 'users', 'pentestuser', obj.linked_object.id)


@admin.register(UserPublicKey)
class UserPublicKeyAdmin(BaseAdmin):
    list_display = ['id', 'user', 'name', 'created', 'enabled']

    def link_user(self, obj):
        return admin_change_url(obj.user.username, 'users', 'pentestuser', obj.user.id)

    def link_encrypted_key_parts(self, obj):
        return admin_changelist_url('ArchivedProjectPublicKeyEncryptedKeyPart encrypted with this public key', 'pentests', 'archivedprojectpublickeyencryptedkeypart', {'public_key_id': obj.id})


@admin.register(ArchivedProject)
class ArchivedProjectAdmin(BaseAdmin):
    list_display = ['id', 'name', 'created', 'tags']

    def link_key_parts(self, obj):
        return admin_changelist_url('key parts', 'pentests', 'archivedprojectkeypart', {'archived_project_id': obj.id})


@admin.register(ArchivedProjectKeyPart)
class ArchivedProjectKeyPartAdmin(BaseAdmin):
    list_display = ['id', 'archived_project', 'user', 'is_decrypted', 'decrypted_at']
    list_select_related = ['archived_project', 'user']

    def link_user(self, obj):
        return admin_change_url(obj.user.username, 'users', 'pentestuser', obj.user.id)

    def link_archive(self, obj):
        return admin_change_url(obj.archived_project.name, 'pentests', 'archivedproject', obj.archived_project.id)

    def link_encrypted_key_parts(self, obj):
        return admin_changelist_url('Encrypted key part data', 'pentests', 'archivedprojectpublickeyencryptedkeypart', {'key_part_id': obj.id})


@admin.register(ArchivedProjectPublicKeyEncryptedKeyPart)
class ArchivedProjectPublicKeyEncryptedKeyPartAdmin(BaseAdmin):
    def link_key_part(self, obj):
        return admin_change_url('Archive key part', 'pentests', 'archivedprojectkeypart', obj.key_part.id)

    def link_public_key(self, obj):
        return admin_change_url(obj.public_key.name, 'pentests', 'userpublickey', obj.public_key.id)


@admin.register(CollabEvent)
class CollabEventAdmin(BaseAdmin):
    list_display = ['id', 'created', 'related_id', 'type']


@admin.register(CollabClientInfo)
class CollabClientInfoAdmin(BaseAdmin):
    list_display = ['id', 'created', 'user', 'client_id', 'path']
    readonly_fields = ['user']


@admin.register(ShareInfo)
class ShareInfoAdmin(BaseAdmin):
    list_display = ['id', 'created', 'project_name', 'note_title']
    readonly_fields = ['note', 'shared_by']
    list_select_related = ['note__project']

    def project_name(self, obj):
        return obj.note.project.name

    def note_title(self, obj):
        return obj.note.title

    def link_project(self, obj):
        return admin_change_url(obj.note.project.name, 'pentests', 'pentestproject', obj.note.project.id)
