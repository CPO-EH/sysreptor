
import enum
import functools
import logging

from reportcreator_api.utils.fielddefinition.types import BaseField, FieldDataType


class SortOrder(enum.Enum):
    ASC = 'asc'
    DESC = 'desc'


@functools.total_ordering
class SortKeyPart:
    def __init__(self, value, order: SortOrder) -> None:
        self.value = value
        self.order = order

    def __eq__(self, other) -> bool:
        return self.value == other.value

    def __lt__(self, other) -> bool:
        if self.order == SortOrder.DESC:
            return other.value < self.value
        else:
            return self.value < other.value

    def __repr__(self) -> str:
        return f'SortKeyPart(value={self.value}, order={self.order})'


def format_sortable_field(value, definition: BaseField):
    if definition.type in [FieldDataType.OBJECT, FieldDataType.LIST, FieldDataType.USER]:
        logging.warning('Sorting by unsupported data type. Ignoring field.')
        return ''
    elif definition.type == FieldDataType.CVSS:
        return float(value['score'])
    elif definition.type == FieldDataType.CWE:
        if not value:
            return -1
        return int(value.replace('CWE-', ''))
    elif definition.type == FieldDataType.ENUM:
        # Sort enums by position of choice in choices list, not by value
        return next((i for i, c in enumerate(definition.choices) if c.value == value['value']), -1)
    elif value is not None:
        return value
    elif definition.type == FieldDataType.BOOLEAN:
        return False
    elif definition.type == FieldDataType.NUMBER:
        return 0
    # STRING, MARKDOWN, COMBOBOX, DATE, USER
    return ''


def sort_findings_by_fields(findings, project_type):
    def get_sort_key(finding):
        out = []
        for order_field_config in project_type.finding_ordering:
            out.append(SortKeyPart(
                value=format_sortable_field(
                    value=finding.get(order_field_config['field']),
                    definition=project_type.finding_fields_obj[order_field_config['field']]),
                order=SortOrder(order_field_config.get('order', 'asc'))))

        # Always sort by created as last key to ensure consistent ordering
        out.append(SortKeyPart(finding.get('created'), order=SortOrder.ASC))
        return out

    return sorted(findings, key=get_sort_key)


def sort_findings_by_order(findings):
    return sorted(findings, key=lambda f: (f.get('order', 0), f.get('created', '')))


def sort_findings(findings, project_type, override_finding_order=False):
    if override_finding_order or not project_type.finding_ordering:
        return sort_findings_by_order(findings)
    else:
        return sort_findings_by_fields(findings, project_type)
