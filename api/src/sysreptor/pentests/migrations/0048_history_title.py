# Generated by Django 5.0 on 2023-12-21 15:43

import itertools

from django.db import migrations, models

import sysreptor.utils.crypto.fields


def migrate_set_history_title(apps, schema_editor):
    def set_title_for_model(model_name, get_title):
        model = apps.get_model('pentests', model_name)
        for batch in itertools.batched(model.objects.all().iterator(), 500):
            for instance in batch:
                instance.history_title = get_title(instance)
            model.objects.bulk_update(batch, fields=['history_title'])

    set_title_for_model('HistoricalPentestProject', lambda h: h.name)
    set_title_for_model('HistoricalPentestFinding', lambda h: h.custom_fields.get('title'))
    set_title_for_model('HistoricalProjectNotebookPage', lambda h: h.title)

    set_title_for_model('HistoricalProjectType', lambda h: h.name)
    set_title_for_model('HistoricalFindingTemplateTranslation', lambda h: h.get_language_display())
    set_title_for_model('HistoricalUploadedAsset', lambda h: h.name)
    set_title_for_model('HistoricalUploadedImage', lambda h: h.name)
    set_title_for_model('HistoricalUploadedProjectFile', lambda h: h.name)
    set_title_for_model('HistoricalUploadedTemplateImage', lambda h: h.name)

    HistoricalProjectType = apps.get_model('pentests', 'HistoricalProjectType')
    HistoricalPentestProject = apps.get_model('pentests', 'HistoricalPentestProject')
    def get_title_section(h):
        project = HistoricalPentestProject.objects.filter(id=h.project_id).filter(history_date__lte=h.history_date).first()
        if not project:
            return None
        project_type = HistoricalProjectType.objects.filter(id=project.project_type_id).filter(history_date__lte=h.history_date).first()
        if not project_type:
            return None
        return next(filter(lambda s: s.get('id') == h.section_id, project_type.report_sections), {}).get('label')
    set_title_for_model('HistoricalReportSection', get_title_section)

    PentestUser = apps.get_model('users', 'PentestUser')
    def get_title_member(h):
        user = PentestUser.objects.filter(id=h.user_id).first()
        if not user:
            return None
        return user.username
    set_title_for_model('HistoricalProjectMemberInfo', get_title_member)


class Migration(migrations.Migration):

    dependencies = [
        ('pentests', '0047_remove_historicalprojectnotebookpage_status_emoji_and_more'),
        ('users', '0011_apitoken'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalfindingtemplate',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalfindingtemplatetranslation',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalpentestfinding',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalpentestproject',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalprojectmemberinfo',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalprojectnotebookpage',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalprojecttype',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalreportsection',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicaluploadedasset',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicaluploadedimage',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicaluploadedprojectfile',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.AddField(
            model_name='historicaluploadedtemplateimage',
            name='history_title',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.TextField(blank=True, null=True), editable=True, null=True),
        ),
        migrations.RunPython(code=migrate_set_history_title, reverse_code=migrations.RunPython.noop),
    ]
