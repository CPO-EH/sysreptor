# Generated by Django 4.2.4 on 2023-08-31 10:35

import django.core.serializers.json
from django.db import migrations, models

import sysreptor.utils.crypto.fields


def update_project_report_sections_structure(projects, project_type, PentestProject, ReportSection):
    # Update structure of all reports using that project_type
    sections_to_create = []
    sections_to_delete = []
    sections_to_update = []
    for project in projects:
        # Merge all report data (sections + project.unknown_custom_fields) and update structure
        data_all = project.custom_fields
        # Check which sections to create/delete/update
        sections = []
        existing_sections = {s.section_id: s for s in project.sections.all()}

        # New sections
        for sid in {s['id'] for s in project_type.report_sections} - set(existing_sections.keys()):
            section = ReportSection(project=project, section_id=sid)
            sections.append(section)
            sections_to_create.append(section)
        # Deleted sections
        for sid in set(existing_sections.keys()) - {s['id'] for s in project_type.report_sections}:
            sections_to_delete.append(existing_sections[sid])
        # Updated sections
        for sid in set(existing_sections.keys()).intersection({s['id'] for s in project_type.report_sections}):
            section = existing_sections[sid]
            sections.append(section)
            sections_to_update.append(section)

        # Distribute data to sections
        for section in sections:
            section_fields = next(filter(lambda s: s['id'] == section.section_id, project_type.report_sections))['fields']
            section.custom_fields = {f: data_all.pop(f) for f in section_fields}
        # Store remaining unknown fields on project
        project.unknown_custom_fields = data_all if data_all else None

    # Persist changes in DB
    PentestProject.objects.bulk_update(filter(lambda p: p.has_changed, projects), fields=['unknown_custom_fields'])
    ReportSection.objects.bulk_update(filter(lambda s: s.has_changed, sections_to_update), fields=['custom_fields'])
    ReportSection.objects.bulk_create(sections_to_create)
    ReportSection.objects.filter(id__in=map(lambda s: s.id, sections_to_delete)).delete()


def migrate_report_sections(apps, schema_editor):
    PentestProject = apps.get_model('pentests', 'PentestProject')
    ReportSection = apps.get_model('pentests', 'ReportSection')

    projects = PentestProject.objects \
        .select_related('project_type') \
        .prefetch_related('sections') \
        .iterator(chunk_size=200)
    for project in projects:
        update_project_report_sections_structure(projects=[project], project_type=project.project_type, PentestProject=PentestProject, ReportSection=ReportSection)


class Migration(migrations.Migration):

    dependencies = [
        ('pentests', '0043_projectnotebookpage_usernotebookpage_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='pentestproject',
            name='unknown_custom_fields',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True), blank=True, editable=True, null=True),
        ),
        migrations.AddField(
            model_name='reportsection',
            name='custom_fields',
            field=sysreptor.utils.crypto.fields.EncryptedField(base_field=models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder), editable=True),
        ),

        migrations.RunPython(code=migrate_report_sections),

        migrations.RemoveField(
            model_name='pentestproject',
            name='custom_fields',
        ),
    ]
